# 1 - Bibliotecas
import pytest
import requests
import json

from utils.utils import ler_csv

# (Opcional) 2 - Classe

# 2.1 Atributos/Propriedades
pet_id = 173218101
pet_name = "Snoopy"
pet_category_id = 1
pet_category_name = "dog"
pet_tag_id = 9
pet_tag_name = "vaccined"
pet_status1 = "available"
pet_status2 = "sold"

url = "https://petstore.swagger.io/v2/pet"
headers = { "Content-Type": "application/json" }

# 2.2 Função Centralizada para Validação
def validar_pet_response(response, expected_status, expected_pet_id, expected_name, expected_category_id, expected_category_name, expected_tags, expected_pet_status=None):
    """
    Valida a resposta da API Pet Store.

    :param response: Resposta da API
    :param expected_status: Código esperado da resposta HTTP
    :param expected_pet_id: ID esperado do pet
    :param expected_name: Nome esperado do pet
    :param expected_category_id: ID esperado da categoria
    :param expected_category_name: Nome esperado da categoria
    :param expected_tags: Lista de tags esperadas (Lista de dicionários)
    :param expected_pet_status: Status esperado do pet (Opcional)
    """
    response_body = response.json()

    assert response.status_code == expected_status
    assert response_body["id"] == expected_pet_id
    assert response_body["name"] == expected_name
    assert response_body["category"]["id"] == expected_category_id
    assert response_body["category"]["name"] == expected_category_name
    assert isinstance(response_body["tags"], list)
    
    # Validação das tags
    for i, tag in enumerate(expected_tags):
        assert response_body["tags"][i]["id"] == tag["id"]
        assert response_body["tags"][i]["name"] == tag["name"]

    # Valida status apenas se for passado como argumento
    if expected_pet_status:
        assert response_body["status"] == expected_pet_status

# 2.3 Funções de Teste
@pytest.mark.order(1)
def test_post_pet():
    # Arrange
    with open("./fixtures/json/pet1.json") as pet:
        data = json.load(pet)

    # Act
    response = requests.post(
        url=url,
        headers=headers,
        data=json.dumps(data),
        timeout=5
    )

    # Assert
    validar_pet_response(response, 200, pet_id, pet_name, pet_category_id, pet_category_name, [{"id": pet_tag_id, "name": pet_tag_name}], pet_status1)


@pytest.mark.order(2)
def test_get_pet():
    # Act
    response = requests.get(
        url=f'{url}/{pet_id}',
        headers=headers,
        timeout=5
    )

    # Assert
    validar_pet_response(response, 200, pet_id, pet_name, pet_category_id, pet_category_name, [{"id": pet_tag_id, "name": pet_tag_name}], pet_status1)


@pytest.mark.order(3)
def test_put_pet():
    # Arrange
    with open("./fixtures/json/pet2.json") as pet:
        data = json.load(pet)

    # Act
    response = requests.put(
        url=url,
        headers=headers,
        data=json.dumps(data),
        timeout=5
    )

    # Assert
    validar_pet_response(response, 200, pet_id, pet_name, pet_category_id, pet_category_name, [{"id": pet_tag_id, "name": pet_tag_name}], pet_status2)


@pytest.mark.order(4)
def test_delete_pet():
    # Act
    response = requests.delete(
        url=f'{url}/{pet_id}',
        headers=headers,
        timeout=5
    )

    # Assert
    response_body = response.json()
    assert response.status_code == 200
    assert response_body["code"] == 200
    assert response_body["type"] == "unknown"
    assert response_body["message"] == str(pet_id)


# Post Parametrizado - Leitura da Massa de Dados
@pytest.mark.order(5)
@pytest.mark.parametrize("id,category_id,category_name,name,tags,status",
        ler_csv("./fixtures/csv/pets.csv"))
def test_post_pet_dinamico(id, category_id, category_name, name, tags, status):
    # Arrange
    pet = {
        "id": int(id),
        "category": {
            "id": int(category_id),
            "name": category_name
        },
        "name": name,
        "photoUrls": [],
        "tags": []
    }

    # Processamento das tags recebidas no CSV
    tags_formatadas = []
    tags = tags.split(";")
    for tag in tags:
        tag_id, tag_name = tag.split("-")
        tags_formatadas.append({"id": int(tag_id), "name": tag_name})

    pet["tags"] = tags_formatadas
    pet["status"] = status

    # Act
    response = requests.post(
        url=url,
        headers=headers,
        data=json.dumps(obj=pet, indent=4),
        timeout=5
    )

    # Assert
    validar_pet_response(response, 200, int(id), name, int(category_id), category_name, tags_formatadas, status)
